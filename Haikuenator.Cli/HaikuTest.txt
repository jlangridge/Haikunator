To commit a tree you have instantiated with "git write-tree", you’d create a "commit" object that refers to that tree and the history behind it—most notably the "parent" commits that preceded it in history.  Normally a "commit" has one parent: the previous state of the tree before a certain change was made. However, sometimes it can have two or more parent commits, in which case we call it a "merge", due to the fact that such a commit brings together ("merges") two or more previous states represented by other commits.  In other words, while a "tree" represents a particular directory state of a working directory, a "commit" represents that state in "time", and explains how we got there.  You create a commit object by giving it the tree that describes the state at the time of the commit, and a list of parents:  and then giving the reason for the commit on stdin (either through redirection from a pipe or file, or by just typing it at the tty).  git commit-tree will return the name of the object that represents that commit, and you should save it away for later use. Normally, you’d commit a new HEAD state, and while git doesn’t care where you save the note about that state, in practice we tend to just write the result to the file pointed at by .git/HEAD, so that we can always see what the last committed state was.  Here is an ASCII art by Jon Loeliger that illustrates how various pieces fit together.